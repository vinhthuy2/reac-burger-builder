{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.css","containers/Auth/Auth.css","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_css__WEBPACK_IMPORTED_MODULE_1__","_Input_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","_this","D_Projects_ReactJs_burgerBuilder_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","_this2","formElementsArray","id","config","form","formEl","react__WEBPACK_IMPORTED_MODULE_6___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_8__","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_10__","errorMessage","error","message","authRedirect","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_7__","to","onSubmit","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_9__","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","isSignUp","actions"],"mappings":"0FAAA,IAAAA,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAI,EAAAH,EAAA,KAAAI,EAAAJ,EAAAE,EAAAC,GAmEeE,IA/DD,SAAAC,GACZ,IAAIC,EAAe,KACbC,EAAe,CAACC,IAAQC,cAM9B,OAJIJ,EAAMK,SAAWL,EAAMM,gBAAkBN,EAAMO,SACjDL,EAAaM,KAAKL,IAAQM,SAGpBT,EAAMU,aACZ,IAAK,QACHT,EACEN,EAAAgB,EAAAC,cAAA,QAAAC,OAAAC,OAAA,CACEC,UAAWb,EAAac,KAAK,MACzBhB,EAAMiB,cAFZ,CAGEC,MAAOlB,EAAMkB,MACbC,SAAUnB,EAAMoB,WAGpB,MACF,IAAK,WACHnB,EACEN,EAAAgB,EAAAC,cAAA,WAAAC,OAAAC,OAAA,CACEC,UAAWb,EAAac,KAAK,MACzBhB,EAAMiB,cAFZ,CAGEC,MAAOlB,EAAMkB,MACbC,SAAUnB,EAAMoB,WAGpB,MACF,IAAK,SACHnB,EACEN,EAAAgB,EAAAC,cAAA,UACEG,UAAWb,EAAac,KAAK,KAC7BE,MAAOlB,EAAMkB,MACbC,SAAUnB,EAAMoB,SAEfpB,EAAMiB,cAAcI,QAAQC,IAAI,SAAAC,GAAM,OACrC5B,EAAAgB,EAAAC,cAAA,UAAQY,IAAKD,EAAOL,MAAOA,MAAOK,EAAOL,OACtCK,EAAOE,iBAKhB,MACF,QACExB,EACEN,EAAAgB,EAAAC,cAAA,QAAAC,OAAAC,OAAA,CACEC,UAAWb,EAAac,KAAK,MACzBhB,EAAMiB,cAFZ,CAGEC,MAAOlB,EAAMkB,MACbC,SAAUnB,EAAMoB,WAKxB,OACEzB,EAAAgB,EAAAC,cAAA,OAAKG,UAAWZ,IAAQuB,OACtB/B,EAAAgB,EAAAC,cAAA,SAAOG,UAAWZ,IAAQwB,OAAQ3B,EAAM4B,OACvC3B,yBC7DP4B,EAAAC,QAAA,CAAkBJ,MAAA,oBAAAC,MAAA,oBAAAvB,aAAA,2BAAAK,QAAA,4CCAlBoB,EAAAC,QAAA,CAAkBC,KAAA,qMCSZA,6MACJC,MAAQ,CACNC,SAAU,CACRC,MAAO,CACLxB,YAAa,QACbO,cAAe,CACbkB,KAAM,QACNC,YAAa,gBAEflB,MAAO,GACPmB,WAAY,CACVC,UAAU,EACVC,SAAS,GAEXC,OAAO,EACPjC,SAAS,GAEXkC,SAAU,CACR/B,YAAa,QACbO,cAAe,CACbkB,KAAM,WACNC,YAAa,YAEflB,MAAO,GACPmB,WAAY,CACVC,UAAU,EACVI,UAAW,GAEbF,OAAO,EACPjC,SAAS,IAGboC,UAAU,KASZC,oBAAsB,SAACC,EAAOC,GAC5B,IAAMC,EAAkBC,YAAaC,EAAKjB,MAAMC,SAAZpB,OAAAqC,EAAA,EAAArC,CAAA,GACjCiC,EAAcE,YAAaC,EAAKjB,MAAMC,SAASa,GAAc,CAC5D5B,MAAO2B,EAAMM,OAAOjC,MACpBsB,MAAOY,YACLP,EAAMM,OAAOjC,MACb+B,EAAKjB,MAAMC,SAASa,GAAaT,YAEnC9B,SAAS,MAIb0C,EAAKI,SAAS,CAAEpB,SAAUc,OAG5BO,cAAgB,SAAAT,GACdA,EAAMU,iBACNN,EAAKjD,MAAMwD,OACTP,EAAKjB,MAAMC,SAASC,MAAMhB,MAC1B+B,EAAKjB,MAAMC,SAASQ,SAASvB,MAC7B+B,EAAKjB,MAAMW,aAIfc,kBAAoB,WAClBR,EAAKI,SAAS,SAAAK,GACZ,MAAO,CAAEf,UAAWe,EAAUf,iGA/B3BgB,KAAK3D,MAAM4D,gBAAkBD,KAAK3D,MAAM6D,kBAC3CF,KAAK3D,MAAM8D,yDAkCN,IAAAC,EAAAJ,KACDK,EAAoB,GAC1B,IAAK,IAAIxC,KAAOmC,KAAK3B,MAAMC,SACzB+B,EAAkBxD,KAAK,CACrByD,GAAIzC,EACJ0C,OAAQP,KAAK3B,MAAMC,SAAST,KAIhC,IAAI2C,EAAOH,EAAkB1C,IAAI,SAAA8C,GAAM,OACrCC,EAAA1D,EAAAC,cAAC0D,EAAA,EAAD,CACE9C,IAAK4C,EAAOH,GACZvD,YAAa0D,EAAOF,OAAOxD,YAC3BO,cAAemD,EAAOF,OAAOjD,cAC7BC,MAAOkD,EAAOF,OAAOhD,MACrBb,SAAU+D,EAAOF,OAAO1B,MACxBlC,eAAgB8D,EAAOF,OAAO7B,WAC9B9B,QAAS6D,EAAOF,OAAO3D,QACvBa,QAAS,SAAAyB,GAAK,OAAIkB,EAAKnB,oBAAoBC,EAAOuB,EAAOH,SAGzDN,KAAK3D,MAAMuE,UACbJ,EAAOE,EAAA1D,EAAAC,cAAC4D,EAAA,EAAD,OAGT,IAAIC,EAAe,KACfd,KAAK3D,MAAM0E,QACbD,EAAeJ,EAAA1D,EAAAC,cAAA,SAAI+C,KAAK3D,MAAM0E,MAAMC,UAGtC,IAAIC,EAAe,KAKnB,OAJIjB,KAAK3D,MAAM6E,kBACbD,EAAeP,EAAA1D,EAAAC,cAACkE,EAAA,EAAD,CAAUC,GAAIpB,KAAK3D,MAAM6D,oBAIxCQ,EAAA1D,EAAAC,cAAA,OAAKG,UAAWZ,IAAQ4B,MACrB6C,EACAH,EACDJ,EAAA1D,EAAAC,cAAA,QAAMoE,SAAUrB,KAAKL,eAClBa,EACDE,EAAA1D,EAAAC,cAACqE,EAAA,EAAD,CAAQC,QAAQ,WAAhB,WAEFb,EAAA1D,EAAAC,cAACqE,EAAA,EAAD,CAAQC,QAAQ,SAASC,QAASxB,KAAKF,mBAAvC,aACaE,KAAK3B,MAAMW,SAAW,SAAW,kBAnHnCyC,aA4IJC,sBAlBS,SAAArD,GACtB,MAAO,CACLuC,QAASvC,EAAMsD,KAAKf,QACpBG,MAAO1C,EAAMsD,KAAKZ,MAClBG,gBAAsC,OAArB7C,EAAMsD,KAAKC,MAC5B3B,eAAgB5B,EAAMwD,cAAcC,SACpC5B,iBAAkB7B,EAAMsD,KAAKzB,mBAIN,SAAA6B,GACzB,MAAO,CACLlC,OAAQ,SAACtB,EAAOO,EAAUkD,GAAlB,OACND,EAASE,IAAa1D,EAAOO,EAAUkD,KACzC7B,sBAAuB,kBAAM4B,EAASE,IAA4B,SAIvDP,CAGbtD","file":"static/js/4.2779a391.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport classes from './Input.css';\r\n\r\nconst input = props => {\r\n  let inputElement = null;\r\n  const inputClasses = [classes.InputElement];\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid);\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case 'input':\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case 'textarea':\r\n      inputElement = (\r\n        <textarea\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case 'select':\r\n      inputElement = (\r\n        <select\r\n          className={inputClasses.join(' ')}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        >\r\n          {props.elementConfig.options.map(option => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input_1VROp\",\"Label\":\"Input_Label_1tOSX\",\"InputElement\":\"Input_InputElement_3TB0k\",\"Invalid\":\"Input_Invalid_38X2d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth_1TInt\"};","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport classes from './Auth.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport { connect } from 'react-redux';\r\nimport { updateObject, checkValidity } from '../../shared/utility';\r\n\r\nclass Auth extends Component {\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'email',\r\n          placeholder: 'Mail address'\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          isEmail: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      password: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'password',\r\n          placeholder: 'Password'\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          minLength: 6\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      }\r\n    },\r\n    isSignup: true\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (!this.props.buildingBurger && this.props.authRedirectPath) {\r\n      this.props.onSetAuthRedirectPath();\r\n    }\r\n  }\r\n\r\n  inputChangedHandler = (event, controlName) => {\r\n    const updatedControls = updateObject(this.state.controls, {\r\n      [controlName]: updateObject(this.state.controls[controlName], {\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          this.state.controls[controlName].validation\r\n        ),\r\n        touched: true\r\n      })\r\n    });\r\n\r\n    this.setState({ controls: updatedControls });\r\n  };\r\n\r\n  submitHandler = event => {\r\n    event.preventDefault();\r\n    this.props.onAuth(\r\n      this.state.controls.email.value,\r\n      this.state.controls.password.value,\r\n      this.state.isSignup\r\n    );\r\n  };\r\n\r\n  switchModeHandler = () => {\r\n    this.setState(prevState => {\r\n      return { isSignup: !prevState.isSignup };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const formElementsArray = [];\r\n    for (let key in this.state.controls) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.controls[key]\r\n      });\r\n    }\r\n\r\n    let form = formElementsArray.map(formEl => (\r\n      <Input\r\n        key={formEl.id}\r\n        elementType={formEl.config.elementType}\r\n        elementConfig={formEl.config.elementConfig}\r\n        value={formEl.config.value}\r\n        invalid={!formEl.config.valid}\r\n        shouldValidate={formEl.config.validation}\r\n        touched={formEl.config.touched}\r\n        changed={event => this.inputChangedHandler(event, formEl.id)}\r\n      />\r\n    ));\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n\r\n    let errorMessage = null;\r\n    if (this.props.error) {\r\n      errorMessage = <p>{this.props.error.message}</p>;\r\n    }\r\n\r\n    let authRedirect = null;\r\n    if (this.props.isAuthenticated) {\r\n      authRedirect = <Redirect to={this.props.authRedirectPath} />;\r\n    }\r\n\r\n    return (\r\n      <div className={classes.Auth}>\r\n        {authRedirect}\r\n        {errorMessage}\r\n        <form onSubmit={this.submitHandler}>\r\n          {form}\r\n          <Button btnType=\"Success\">Submit</Button>\r\n        </form>\r\n        <Button btnType=\"Danger\" clicked={this.switchModeHandler}>\r\n          SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuthenticated: state.auth.token !== null,\r\n    buildingBurger: state.burgerBuilder.building,\r\n    authRedirectPath: state.auth.authRedirectPath\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAuth: (email, password, isSignUp) =>\r\n      dispatch(actions.auth(email, password, isSignUp)),\r\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Auth);\r\n"],"sourceRoot":""}